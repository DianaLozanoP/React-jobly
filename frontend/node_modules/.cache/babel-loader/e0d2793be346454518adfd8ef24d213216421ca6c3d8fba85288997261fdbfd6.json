{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst useLocalStorage = (key, initialValue) => {\n  _s();\n  // Retrieve stored value from localStorage if available, otherwise use initialValue\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error('Error accessing localStorage:', error);\n      return initialValue;\n    }\n  });\n  // Update localStorage when value changes\n  const setValue = value => {\n    try {\n      // Allow value to be a function to match useState API\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save to localStorage\n      localStorage.setItem(key, JSON.stringify(valueToStore));\n      // Update state\n      setStoredValue(valueToStore);\n    } catch (error) {\n      console.error('Error updating localStorage:', error);\n    }\n  };\n};\n_s(useLocalStorage, \"8+GmQg7lKGQSX97mSZ3QkU0SJRQ=\");\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","item","localStorage","getItem","JSON","parse","error","console","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["/home/dianaloz/react-jobly/react-jobly/frontend/src/Hooks/useLocalStorage.js"],"sourcesContent":["import { useState } from 'react';\n\n\nconst useLocalStorage = (key, initialValue) => {\n    // Retrieve stored value from localStorage if available, otherwise use initialValue\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            const item = localStorage.getItem(key);\n            return item ? JSON.parse(item) : initialValue;\n        } catch (error) {\n            console.error('Error accessing localStorage:', error);\n            return initialValue;\n        }\n    });\n    // Update localStorage when value changes\n    const setValue = value => {\n        try {\n            // Allow value to be a function to match useState API\n            const valueToStore = value instanceof Function ? value(storedValue) : value;\n            // Save to localStorage\n            localStorage.setItem(key, JSON.stringify(valueToStore));\n            // Update state\n            setStoredValue(valueToStore);\n        } catch (error) {\n            console.error('Error updating localStorage:', error);\n        }\n    };\n\n}\n\nexport default useLocalStorage;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAGhC,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,YAAY,KAAK;EAAAC,EAAA;EAC3C;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,MAAM;IACjD,IAAI;MACA,MAAMO,IAAI,GAAGC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC;MACtC,OAAOK,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAGJ,YAAY;IACjD,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAOT,YAAY;IACvB;EACJ,CAAC,CAAC;EACF;EACA,MAAMW,QAAQ,GAAGC,KAAK,IAAI;IACtB,IAAI;MACA;MACA,MAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACV,WAAW,CAAC,GAAGU,KAAK;MAC3E;MACAP,YAAY,CAACU,OAAO,CAAChB,GAAG,EAAEQ,IAAI,CAACS,SAAS,CAACH,YAAY,CAAC,CAAC;MACvD;MACAV,cAAc,CAACU,YAAY,CAAC;IAChC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACxD;EACJ,CAAC;AAEL,CAAC;AAAAR,EAAA,CAzBKH,eAAe;AA2BrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}