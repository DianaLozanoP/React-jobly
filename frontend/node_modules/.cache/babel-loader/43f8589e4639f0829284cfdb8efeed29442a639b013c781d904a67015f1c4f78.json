{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  // Get all companies \n\n  static async getAllCompanies() {\n    let res = await this.request(`companies`);\n    return res;\n  }\n  //Get company by name\n  static async searchCompany(name) {\n    let res = await this.request(`companies?name=${name}`);\n    return res;\n  }\n  //Get all jobs\n  static async getJobs(name) {\n    let res = await this.request(`jobs`);\n    return res;\n  }\n\n  //Get a job based on the title\n  static async getJob(title) {\n    let res = await this.request(`jobs?title=${title}`);\n    return res;\n  }\n  //Add a new user\n  static async registerUser(data) {\n    const url = `${BASE_URL}/auth/register`;\n    try {\n      const res = await axios.post(url, data);\n      JoblyApi.token = res.data.token;\n      return res;\n    } catch (err) {\n      console.error(\"Error registering user:\", err);\n      throw err;\n    }\n  }\n  //Log in user\n  static async logInUser(data) {\n    const url = `${BASE_URL}/auth/token`;\n    try {\n      const res = await axios.post(url, data);\n      JoblyApi.token = res.data.token;\n      return res;\n    } catch (err) {\n      console.error(\"Error registering user:\", err);\n      throw err;\n    }\n  }\n  //Get info about user\n  static async getUser(username) {\n    try {\n      let res = this.request(`/users/${username}`);\n      return res;\n    } catch (err) {\n      console.error(\"Error registering user:\", err);\n      throw err;\n    }\n  }\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\n\n// JoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n//     \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n//     \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCompany","handle","res","company","getAllCompanies","searchCompany","name","getJobs","getJob","title","registerUser","post","logInUser","getUser","username"],"sources":["/home/dianaloz/react-jobly/react-jobly/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n    // the token for interactive with the API will be stored here.\n    static token;\n\n    static async request(endpoint, data = {}, method = \"get\") {\n        console.debug(\"API Call:\", endpoint, data, method);\n\n        //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n        //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n        const url = `${BASE_URL}/${endpoint}`;\n        const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n        const params = (method === \"get\")\n            ? data\n            : {};\n\n        try {\n            return (await axios({ url, method, data, params, headers })).data;\n        } catch (err) {\n            console.error(\"API Error:\", err.response);\n            let message = err.response.data.error.message;\n            throw Array.isArray(message) ? message : [message];\n        }\n    }\n\n    // Individual API routes\n\n    /** Get details on a company by handle. */\n\n    static async getCompany(handle) {\n        let res = await this.request(`companies/${handle}`);\n        return res.company;\n    }\n\n    // Get all companies \n\n    static async getAllCompanies() {\n        let res = await this.request(`companies`)\n        return res\n    }\n    //Get company by name\n    static async searchCompany(name) {\n        let res = await this.request(`companies?name=${name}`)\n        return res\n    }\n    //Get all jobs\n    static async getJobs(name) {\n        let res = await this.request(`jobs`)\n        return res\n    }\n\n    //Get a job based on the title\n    static async getJob(title) {\n        let res = await this.request(`jobs?title=${title}`)\n        return res\n    }\n    //Add a new user\n    static async registerUser(data) {\n        const url = `${BASE_URL}/auth/register`;\n        try {\n            const res = await axios.post(url, data);\n            JoblyApi.token = res.data.token;\n            return res;\n        } catch (err) {\n            console.error(\"Error registering user:\", err);\n            throw err;\n        }\n    }\n    //Log in user\n    static async logInUser(data) {\n        const url = `${BASE_URL}/auth/token`;\n        try {\n            const res = await axios.post(url, data);\n            JoblyApi.token = res.data.token;\n            return res;\n        } catch (err) {\n            console.error(\"Error registering user:\", err);\n            throw err;\n        }\n    }\n    //Get info about user\n    static async getUser(username) {\n        try {\n            let res = this.request(`/users/${username}`)\n            return res;\n        } catch (err) {\n            console.error(\"Error registering user:\", err);\n            throw err;\n        }\n    }\n\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\n\n// JoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n//     \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n//     \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\n\nexport default JoblyApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}